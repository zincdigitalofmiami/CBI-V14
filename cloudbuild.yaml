steps:
  # Step 1: ENFORCE RULE #1 - Check for mock data
  - name: 'gcr.io/cloud-builders/bash'
    id: 'check-no-mock-data'
    entrypoint: 'bash'
    args: ['scripts/check_no_mock_data.sh']
    waitFor: ['-']

  # Step 2: ENFORCE environment variable rules
  - name: 'gcr.io/cloud-builders/bash'
    id: 'check-env-vars'
    entrypoint: 'bash'
    args: ['scripts/check_env_vars.sh']
    waitFor: ['-']

  # Step 3: Install Python dependencies
  - name: 'python:3.11'
    id: 'install-python-deps'
    dir: 'forecast'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        pip install -r requirements.txt
        pip install pytest pylint black flake8

  # Step 4: Python linting
  - name: 'python:3.11'
    id: 'lint-python'
    dir: 'forecast'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        black --check --line-length 100 .
        flake8 --max-line-length 100 .
    waitFor: ['install-python-deps']

  # Step 5: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-forecast-api'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/forecast-api:$SHORT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/forecast-api:latest'
      - 'forecast/'
    waitFor: ['lint-python', 'check-no-mock-data', 'check-env-vars']

  # Step 6: Push images
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-images'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker push gcr.io/$PROJECT_ID/forecast-api:$SHORT_SHA
        docker push gcr.io/$PROJECT_ID/forecast-api:latest
    waitFor: ['build-forecast-api']

images:
  - 'gcr.io/$PROJECT_ID/forecast-api:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/forecast-api:latest'

options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

timeout: 1800s  # 30 minutes

